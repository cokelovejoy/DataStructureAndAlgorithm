// LRU缓存机制
// 设计和实现一个LRU缓存机制
// 实现LRUCache类：
/**
 * LRUCache(int capacity) 以正整数作为容量 capacity 初始化 LRU 缓存
 * 实现 get(key) 方法，如果关键字 key 存在于缓存中，则返回关键字的值，否则返回 -1 。
 * 实现 put(key, value)方法，如果关键字已经存在，则变更其数据值；如果关键字不存在，则插入该组「关键字-值」。
 * 当缓存容量达到上限时，它应该在写入新数据之前删除最久未使用的数据值，从而为新的数据值留出空间。
 */

// LRU 缓存淘汰算法就是一种常用策略。
// LRU 的全称是 Least Recently Used，也就是说我们认为最近使用过的数据应该是是「有用的」，
// 很久都没用过的数据应该是无用的，内存满了就优先删那些很久没用过的数据。

// 核心 使用双向链表和哈希表的结合体。
// 哈希表查询速度快，链表有顺序之分。